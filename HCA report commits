\subsection{Algorithm 5 - Hill Climbing Attack}
A hill climbing attack is a an attack designed to efficiently alter an image to fool an image classifier. This is an effective heuristic for its relatively low runtime. This algorithm starts by creating an array of size n x m x 3 where n and m are the pixel dimensions of the image. The three represents the r, g, and b values of each pixel, ranging from 0 to 1. The hill climbing algorithm starts by calculating the total sum of the squared rgb values for all pixels. Then, one random pixels rgb values are changed. If this change increases the total sum squared, or score, then the change is kept. Once the first change is kept, the algorithm jumps to a nearby pixel and repeats until a local maximum is found. Once this happens, the algorithm jumps to a different random pixel and repeats these two processes until either a global maximum is found or the budget of one percent is reached.

\textbf{Hill Climbing Attack:}
The total runtime is of the hill climbing algorithm is mostly dependant on the size of the image. However, the hill climbing attack is designed to run efficiently relative to other algorithms. Over all the tests with different images, the algorithm never took more than a fe minutes to complete. This is because rather than going through all of the pixels to find the ones that would be most effective to change, the hill climb algorithm uses the gradient to determine the best direction to move as well as when it is at a local or global maximum. Also since the algorithm simply continues until either a global maximum is found or one percent of the pixels are changed, the runtime for this algorithm is o(n) for any image with n pixels.

\textbf{Hill climbing Algorithm:}
Overall, the Hill climbing algorithm would be described as unsuccessful. Although the algorithm was capable of editing an image and on a handful of occasions, fool the image classifier. These successes were rare and not repeatable. Because of the random nature of the hill climb algorithm, as well as the random changes made to each pixel, each run of the algorithm produced slightly different results - even on the same image. Given the time and knowledge, one change I would make is that I would determine a better methodology of changing the rgb values of each pixel such that the randomness of each test is significaltly decreased and the overall effectiveness of the algorithm is increased.

\textbf{Hill Climbing Algorithm}
\\
one of the main benefits of the Hill climbing algorithm is its effectiveness. It can often find local or global maximums after very few iterations. While it was not as successful in this application, much of that was due to randomness in other factors such as the way that the rgb values were changed. The main part of the algorithm was often very successful, very quickly locating local maximums and moving on. To this point, on average, algorithm only took about two to three minutes to complete.
